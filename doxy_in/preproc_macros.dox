/** \page preproc_macros Preprocessor Macros
This page summarizes the preprocessor macros defined by the build-system, the compiler detection or the user.

\tableofcontents

<hr><hr>
\section preproc_sec_comp_detect Compiler-Detection Macros
This section enlists the macros defined by the compiler detection headers to provide information about the compiler
and its version being in use.

<hr>
\subsection ppm_feat_compiler FEAT_COMPILER
This macro is defined by the compiler detection system and its value is a string literal specifying the name and
possibly the version of the compiler in use, e.g. <code>"Microsoft Visual C++ 2015"</code> or <code>"GNU C++ compiler"</code>.

\note This macro may also be defined the user through the build system, which will effectively disable the internal
compiler detection system.

<hr>
\subsection ppm_feat_compiler_gnu FEAT_COMPILER_GNU
This macro is defined if the GNU C++ compiler is detected. Its value is defined as
\verbatim
(__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
\endverbatim
which is a constant integral expression identifying the compiler version, e.g. the value <c>40702</c> identifies the
G++ 4.7.2 compiler. See the compiler's documentation for details.

<hr>
\subsection ppm_feat_compiler_clang FEAT_COMPILER_CLANG
This macro is defined if the Clang/LLVM C++ compiler is detected. Its value is defined as
\verbatim
(__clang_major__ * 10000 + __clang_minor__ * 100 + __clang_patchlevel__)
\endverbatim
which is a constant integral expression identifying the compiler version, e.g. the value <c>40702</c> identifies the
clang 4.7.2 compiler. See the compiler's documentation for details.

<hr>
\subsection ppm_feat_compiler_cray FEAT_COMPILER_CRAY
This macro is defined if the Cray C++ compiler is detected. Its value is defined as
\verbatim
(_RELEASE_MAJOR * 10000 + _RELEASE_MINOR)
\endverbatim
which is a constant integral expression identifying the compiler version. See the compiler's documentation for details.

<hr>
\subsection ppm_feat_compiler_intel FEAT_COMPILER_INTEL
This macro is defined if the Intel C++ compiler is detected. Its value coindices with the compiler's internal macro
<c>__INTEL_COMPILER</c>, which is a constant integral expression identifying the compiler version, e.g. the value
<c>1210</c> identifies the Intel C++ 12.1 compiler. See the compiler's documentation for details.

<hr>
\subsection ppm_feat_compiler_intel_oneapi FEAT_COMPILER_INTEL_ONEAPI
This macro is defined if the Intel OneAPI C++ compiler is detected. Its value coindices with the compiler's internal macro
<c>__INTEL_LLVM_COMPILER</c>, which is a constant integral expression identifying the compiler version, e.g. the value
<c>20250000</c> identifies the Intel OneAPI C++ 2025.0 compiler. See the compiler's documentation for details.

<hr>
\subsection ppm_feat_compiler_microsoft FEAT_COMPILER_MICROSOFT
This macro is defined if the Microsoft Visual C++ compiler is detected. Its value coincides with the compiler's internal
macro <c>_MSC_FULL_VER</c>, which is an constant integral expression identifying the compiler version, e.g. the value
<code>193030705</code> identifies the initial release version of the Visual C++ 2022 compiler.
See the compiler's documentation for details.

<hr><hr>
\section preproc_sec_backends Backend / Library Macros
This section enlists macros defined by the build system, which specify what types of third-party libraries and backends
are available to FEAT.

<hr>
\subsection ppm_feat_have_alglib FEAT_HAVE_ALGLIB
This macro is defined by the build system if the FEAT kernel is linked against the ALGLIB library.

<hr>
\subsection ppm_feat_have_cgal FEAT_HAVE_CGAL
This macro is defined by the build system if the FEAT kernel is linked against the CGAL library.

<hr>
\subsection ppm_feat_have_boost FEAT_HAVE_BOOST
This macro is defined by the build system if the FEAT kernel is linked against the BOOST library.

<hr>
\subsection ppm_feat_have_deathhandler FEAT_HAVE_DEATH_HANDLER
This macro is defined by the build system if the FEAT kernel is linked against the DeathHandler library.

<hr>
\subsection ppm_feat_have_cuda FEAT_HAVE_CUDA
This macro is defined by the build system if the FEAT kernel is linked against the CUDA library.

If defined, the LAFEM subsystem of the FEAT kernel will offer corresponding specializations for the containters and
operations using CUDA as a work-horse.

<hr>
\subsection ppm_feat_have_cudss FEAT_HAVE_CUDSS
This macro is defined by the build system if the FEAT kernel is linked against the cuDSS library.

<hr>
\subsection ppm_feat_have_fparser FEAT_HAVE_FPARSER
This macro is defined by the build system if the FEAT kernel is linked against the fparser library.

<hr>
\subsection ppm_feat_have_floatx FEAT_HAVE_FLOATX
This macro is defined by the build system if the FEAT kernel has support for datatypes offered by the FloatX library.

<hr>
\subsection ppm_feat_have_halfmath FEAT_HAVE_HALFMATH
This macro is defined by the build system if the FEAT kernel has support for halfmath datatypes.
The datatypes name is half_float::half.

<hr>
\subsection ppm_feat_have_hypre FEAT_HAVE_HYPRE
This macro is defined by the build system if the FEAT kernel is linked against the HYPRE library.

<hr>
\subsection ppm_feat_have_metis FEAT_HAVE_METIS
This macro is defined by the build system if the FEAT kernel is linked against the METIS library.

<hr>
\subsection ppm_feat_have_mkl FEAT_HAVE_MKL
This macro is defined by the build system if the FEAT kernel is linked against the Intel MKL library.

If defined, the LAFEM subsystem of the FEAT kernel will offer corresponding specializations for the operations using
the MKL as a work-horse.

<hr>
\subsection ppm_feat_have_mpi FEAT_HAVE_MPI
This macro is defined by the build system if the FEAT kernel is linked against a MPI library.

<hr>
\subsection ppm_feat_have_omp FEAT_HAVE_OMP
This macro activates support for OpenMP, a compilerpragma based C++ extension for multithreading.
Note, that this also activates support for the parallel version of the Intel MKL Library, if enabled separately.

<hr>
\subsection ppm_feat_have_parmetis FEAT_HAVE_PARMETIS
This macro is defined by the build system if the FEAT kernel is linked against the ParMETIS library.
\note If this macro is defined, then \c FEAT_HAVE_METIS is also defined.

<hr>
\subsection ppm_feat_have_quadmath FEAT_HAVE_QUADMATH
This macro is defined by the build system if the FEAT kernel is linked against the quadmath library,
which is included in the GCC compiler since version 4.6.0. If defined, corresponding specializations and overloads
for the datatype <code>__float128</code> are supplied.

<hr>
\subsection ppm_feat_have_superlu_dist FEAT_HAVE_SUPERLU_DIST
This macro is defined by the build system if the FEAT kernel is linked against the SuperLU_DIST library.

<hr>
\subsection ppm_feat_have_triangle FEAT_HAVE_TRIANGLE
This macro is defined by the build system if the FEAT kernel is linked against the triangle library,
which offers a set of 2D triangular mesh generators.

\note
If you want to include the <c>triangle.h</c> header file, you first have to define the following preprocessor macros,
\b before including the header itself:
\code{.cpp}
#define ANSI_DECLARATORS
#define REAL double
#define VOID void
\endcode

<hr>
\subsection ppm_feat_have_trilinos FEAT_HAVE_TRILINOS
This macro is defined by the build system if the FEAT kernel is linked against the trilinos library,
a collection of reusable scientific software libraries, known in particular for linear solvers, non-linear solvers, transient solvers,
optimization solvers, and uncertainty quantification (UQ) solvers.

<hr>
\subsection ppm_feat_have_umfpack FEAT_HAVE_UMFPACK
This macro is defined by the build system if the FEAT kernel is linked against the UMFPACK library, which is part of
the SuiteSparse library package.

<hr>
\subsection ppm_feat_have_zfp FEAT_HAVE_ZFP
This macro is defined by the build system if the FEAT kernel is linked against the zfp library.

<hr>
\subsection ppm_feat_have_zlib FEAT_HAVE_ZLIB
This macro is defined by the build system if the FEAT kernel is linked against the zlib library.

<hr>
\subsection ppm_feat_have_zoltan FEAT_HAVE_ZOLTAN
This macro is defined by the build system if the FEAT kernel is linked against the zoltan library.

<hr><hr>
\section preproc_sec_user_def User-Defineable Macros
This section enlists miscellaneous macros that can be defined by the user via the build-system to affect various parts
of the FEAT kernel.

<hr>
\subsection ppm_feat_eickt FEAT_EICKT
This macro can be defined to enable explicit instantiation of all common kernel templates.

\note
This macro is defined if the command line option <code>\--eickt</code> is passed to the configure script.

<hr>
\subsection ppm_feat_index_ull FEAT_INDEX_U32
This macro can be defined to affect the definition of the <c>FEAT::Index</c> data type in the kernel base-header.

<b>Effects:</b><br>
If undefined, <c>FEAT::Index</c> is a typedef for <c>std::uint64_t</c>.<br>
If defined, <c>FEAT::Index</c> is a typedef for <c>std::uint32_t</c>.

<hr>
\subsection ppm_feat_no_config FEAT_NO_CONFIG
This macro can be defined to avoid config-header inclusion in the kernel base-header.

<b>Effects:</b><br>
If undefined, the kernel base-header will include the header <code>feat_config.hpp</code> from the FEAT root directory
at the beginning of the file.

\note This macro is automatically defined by the Visual Studio build system.

<hr>
\subsection ppm_feat_ovr_mpi_ops FEAT_OVERRIDE_MPI_OPS

This macro can be defined to override the default MPI operation implmentations by custom implementations.

<b>Effects:</b><br>
If defined, the MPI wrapper classes and functions implemented in the FEAT::Dist namespace will use custom
implementations of the Dist::op_sum, Dist::op_max and Dist::op_min operations, which provide support for additional
custom datatypes such as the 128-bit float supplied by the quadmath library.

\remark
Overriding the default implementations supplied by the MPI library seems to have a negative impact on performance for
the default data types in some cases. Therefore, it is advised to define this macro only if support for additional
datatypes is required.

\note
This macro is defined if the command line option <code>\--ovr_mpi_ops</code> is passed to the configure script.

<hr>
\subsection ppm_feat_mpi_thread_multiple FEAT_MPI_THREAD_MULTIPLE

This macro can be defined to distribute the actual executoin of asynchronous mpi calls to separate threads.

<b>Effects:</b><br>
If defined, the SynchScalarTicket starts a new thread for its MPI calls and thus enforces truly asynchronous execution.
In accordance to \cite Wittmann13, the MPI_Wait call follows directly after the previous mpi call to
unconditionally trigger the start of all mpi communication.

\note
This macro is defined if the command line option <code>\--mpi_thread_multiple</code> is passed to the configure script.

<hr>
\subsection ppm_feat_mkl_sparse_executor FEAT_USE_MKL_SPARSE_EXECUTOR

Use the new intel mkl sparse executor interface for sparse matrix vector products.

<hr>
\subsection ppm_feat_unroll_banded FEAT_UNROLL_BANDED
This macro can be defined to enable loop unrolling of the SparseMatrixBanded kernels via template meta programming.

\note
This macro is defined if the command line option <code>\--unroll_banded</code> is passed to the configure script.

<hr><hr>

\section preproc_sec_codegen Code-Generation Control Macros
This section enlist various macros which control the compiler's code generation.

<hr>
\subsection ppm_feat_pragma_ivdep FEAT_PRAGMA_IVDEP
This macro can be used to instruct the compiler to ignore assumed vector dependencies. To use this loop pragma, place it
immediately before - not in - a loop definition. The pragma takes effect for the scope of the loop that follows it.

See also:
- https://gcc.gnu.org/onlinedocs/gcc-4.9.2/gcc/Loop-Specific-Pragmas.html
- https://msdn.microsoft.com/en-us/library/hh923901.aspx
- https://software.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/compiler-reference/pragmas/intel-specific-pragma-reference/ivdep.html

<hr>
\subsection ppm_feat_pragma_omp FEAT_PRAGMA_OMP
This macro is used to declare OpenMP pragmas in FEAT3 code and its one and only parameter is the omp directive part
following the <c>\#pragma omp</c>, so as an example, the typical <c>\#pragma omp parallel for</c> simply becomes
<c>FEAT_PRAGMA_OMP(parallel for)</c>. The reason for why one should use this macro (instead of the direct
<c>\#pragma omp</c> directive) is that the <c>FEAT_PRAGMA_OMP</c> macro can be deactivated via the build system if FEAT3
is configured to build without OpenMP support enabled, which would result in 'unknown pragma' warnings otherwise.

\code{.cpp}
FEAT_PRAGMA_OMP(parallel for shared(alpha)) // <==> #pragma omp parallel for shared(alpha)
for(int i = 0; i < n; ++i)
  y[i] *= alpha*x[i];
\endcode

<hr>
\subsection ppm_feat_force_inline FORCE_INLINE
This macro can be used to force the compiler to compile a function inline. The semantics of FORCE_INLINE are exactly the
same as those for the C++ inline keyword.

<hr>
\subsection ppm_feat_noinline NOINLINE
This macro can be used to force the compiler to compile a function without inlining.


<hr><hr>
\section preproc_sec_misc Miscellaneous Macros
This section enlists various macros which do not fit into any other section.

<hr>
\subsection ppm_feat_warnings FEAT_DISABLE_WARNINGS / FEAT_RESTORE_WARNINGS
This macro pair can be used to modify the compiler's diagnostics settings to suppress warnings for the inclusion of
third-party header includes.

\attention This macro pair is meant only for third-party includes and shall \b not be used to suppress warning arising
from FEAT code!

\note This macro pair may not be supported by all compilers. Furthermore, some warnings cannot be disabled, so there is
no guarantee that the compiler will remain quiet even if this macro pair is in use.

<b>Example:</b><br>
\code{.cpp}
#include <kernel/base_header.hpp>

// suppress warnings for third-party header
FEAT_DISABLE_WARNINGS

// include third-party header producing compiler warnings
#include <thirdparty/some_library/wicked_header.h>

// restore previous diagnostics settings
FEAT_RESTORE_WARNINGS

// ...
\endcode

<hr>
\subsection ppm_feat_git_sha1 FEAT_GIT_SHA1
This macro contains the git sha1 checksum of the current HEAD in FEAT_SOURCE_DIR, at the time configure was executed.

<hr>
\subsection ppm_feat_f128c FEAT_F128C(x)
This functional macro can be used to define 128-bit floating point constants if FEAT is configured to link against the
quadmath library. The exact definition of this macro is as follows:
\code{.cpp}
#ifdef FEAT_HAVE_QUADMATH
#  define FEAT_F128C(x) x##Q
#else
#  define FEAT_F128C(x) x
#endif
\endcode

<hr><hr>
\section preproc_sec_build_system Build-System Macros
This section enlists the macros defined directly by the buildsystem, specifying the current build mode.

\attention
The macros in this section are highly platform dependent by definition, i.e. there is no guarantee that a specific macro
is defined on all platforms. Your code should not rely on any of these macros being defined!

<hr>
\subsection ppm_feat_debug_mode FEAT_DEBUG_MODE
This macro is defined if the corresponding build is a debug build.
If defined, the kernel base-header defines the <c>DEBUG</c> macro.

<hr>
\subsection ppm_visual_studio VISUAL_STUDIO
This macro is defined as 1 by the <i>hand-made</i> Visual Studio project files. It must be left undefined by the CMake
and any other build system, independent of whether the MS VC++ compiler is used or not.

<hr>
\subsection ppm_feat_testing_vc FEAT_TESTING_VC
This macro is defined as 1 by the Visual Studio regression test system to disable error popup dialogs and install
a custom exception filter for the Windows OS.

<hr>
\subsection ppm_feat_source_dir FEAT_SOURCE_DIR
This macro contains a string literal specifying the full absolute path to the root source directory.

<hr>
\subsection ppm_feat_binary_dir FEAT_BINARY_DIR
This macro contains a string literal specifying the full absolute path to the root binary directory.

<hr>
\subsection ppm_feat_build_id FEAT_BUILD_ID
This macro contains a string literal specifying the user provided build id string, that was passed to the configure_feat script.

<hr>
\subsection ppm_feat_cpu_type FEAT_CPU_TYPE
This macro contains a string literal describing the detected target cpu type.

<hr>
\subsection ppm_feat_system_host_compiler FEAT_SYSTEM_HOST_COMPILER
The system compiler the actual host compiler will rely on, e.g. using its header files etc.

<hr>
\subsection ppm_feat_cuda_host_compiler FEAT_CUDA_HOST_COMPILER
The host compiler that will be used by nvcc for host code compilation.

<hr>
\subsection ppm_cmake_cxx_compiler_id CMAKE_CXX_COMPILER_ID
Descriptive compiler name, as detected by cmake.

<hr>
\subsection ppm_feat_compiler_id FEAT_COMPILER_ID
Descriptive compiler name, as set by the configure_feat script.

<hr>
\subsection ppm_cmake_cxx_compiler_version CMAKE_CXX_COMPILER_VERSION
Compiler version, as detected by cmake.

<hr>
\subsection ppm_cmake_cxx_compiler CMAKE_CXX_COMPILER
Path to the used host compiler.

<hr>
\subsection ppm_feat_compiler_wrapper FEAT_USE_COMPILER_WRAPPER
This macro indicates, if defined, that a compiler wrapper like ccache or distcc is used to compile FEAT.

<hr>
\subsection ppm_cmake_cxx_compiler_arg1 CMAKE_CXX_COMPILER_ARG1
Contains the 'real' compiler, if we use a COMPILER_WRAPPER.
Is empty, if we don't.

<hr>
\subsection ppm_cmake_cxx_compiler_arg1_path CMAKE_CXX_COMPILER_ARG1_PATH
Path to CMAKE_CXX_COMPILER_ARG1, if any.

<hr>
\subsection ppm_cmake_cxx_flags CMAKE_CXX_FLAGS
The CXXFLAGS of the host compiler.

<hr>
\subsection ppm_cuda_nvcc_executable FEAT_CUDA_NVCC_EXECUTABLE
Path to the used nvcc compiler.

<hr>
\subsection ppm_cuda_nvcc_flags FEAT_CUDA_NVCC_FLAGS
The CXXFLAGS of the nvcc compiler.

<hr>
\subsection ppm_cuda_version FEAT_CUDA_VERSION
Version of the cuda SDK.

<hr>
\subsection ppm_cuda_version_major FEAT_CUDA_VERSION_MAJOR
Major version of the cuda SDK.

<hr>
\subsection ppm_cuda_arch FEAT_CUDA_ARCH
Compile for this CUDA device architecture

<hr>
\subsection ppm_mpi_cxx_compiler MPI_CXX_COMPILER
Absolute path to mpi compiler wrapper.

<hr>
\subsection ppm_mpiexec MPIEXEC
Absolute path to mpi execution wrapper.

<hr>
\subsection ppm_cmake_mpi_version CMAKE_MPI_VERSION
MPI Library version.

<hr>
\subsection ppm_feat_hostname FEAT_HOSTNAME
Hostname of the computer in use.

<hr>
\subsection ppm_cmake_command CMAKE_COMMAND
Full path of the cmake binary.

<hr>
\subsection ppm_cmake_generator CMAKE_GENERATOR
The 'makefile' generator used by cmake.

**/
