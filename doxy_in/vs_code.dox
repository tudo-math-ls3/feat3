/** \page feat_for_vscode FEAT for Visual Studio Code on Unix and Windows Systems
This page describes the setup and use of FEAT with the Visual Studio Code editor.

\tableofcontents

\section vscode_prereques Prerequisites for using FEAT with VScode
\subsection unix_vscode_prereques Prerequisites under unix

In addition to a working build toolchain, i.e. a compiler toolchain, e.g. gcc or LLVM/clang, and a generator, e.g. make or ninja, in your path,
you need at least a version of CMake 3.9 or higher and a version of python(3) installed, both of which should also be in your path.
Of course you will also need <c>VScode</c> installed.
To also use MPI, etc., see the configure script, but basically certain packages, such as MPI or CUDA, need to be pre-installed and findable on your system,
i.e. in your path or you are able to pass the location, others like UMFPACK, Zoltan, ... will be automatically installed in a FEAT subdirectory if you pass the
flag to the configure system, more on this later.

\subsubsection unix_vscode_greenhouse Special case: Modul based enviroment

In the case of a module-based software distribution (e.g. our greenhouse servers), first load the modules you need, then open <c>VScode</c> from the terminal by changing the current directory
to the FEAT source folder and run
\verbatim
  code .
\endverbatim

You should also consider running <c>VScode</c> from a compute server so that the building and IntelliSense shenanigans are performed on the server's resources.

\subsection win_vscode_prereques Prerequisites under Windows
For a number of reasons, FEAT in <c>VScode</c> can only be fully compiled (i.e. with (all) third party libraries) using the <c>Visual Studio 2022 clang/llvm</c> toolchain,
which has the side-effect that, due to a bug in the <c>VS22</c> implementation, no address sanitiser can be used for the time being.
Hopefully this will be fixed in the next major release.
You will also need at least a <c>CMake 3.9</c> version, preferably at least a <c>CMake 3.15</c> version, and a <c>python3</c> version.
While <c>VS22</c> provides ninja as a build generator, you can of course provide your own (e.g. <c>MinGW</c>'s <c>make</c>).
All of these need to be included in your path, see standard Windows documentation on how to do this.

\attention
A few notes on installing <c>VS22</c>:
To use clang with GNU-style command-line arguments (which is currently the only supported compilation toolchain), you need to add the corresponding
option in your <c>VS22</c> installation.
You will also need a relatively new Windows SDK that your compiler can find.
An easy way to archive this is to also select the option to install the latest Windows SDK in your <c>VS22</c> installation.
If <c>VS22</c> is in your path, you should then be able to find the GNU style Clang toolchain.

\subsubsection win_vscode_prereqs_mpi Microsoft MPI
If you want to make use of FEAT's parallel computing capabilities, you will also need to install the <b>Microsoft MPI</b>
library as well as the corresponding SDK. Note that installing MPI is <b>not</b> mandatory, however, without this
library, FEAT is limited to its "single-process" functionality.

\note
Previous attempts to support other MPI implementations such as <c>MPICH</c> or <c>OpenMPI</c> in combination with
Visual Studio have not been successful, so these (and other) implementations are officially unsupported by the FEAT
Visual Studio build-system. Sorry for the inconvenience.

You can download the latest version of the MS-MPI library here:
 - https://learn.microsoft.com/en-us/message-passing-interface/microsoft-mpi
 - <b>Important:</b> You need to download and install <b>both</b> <c>MSMpiSetup.exe</c> and <c>msmpisdk.msi</c>.

\note
From MS-MPI Version 7 on, you will need to enable the <em>MS-MPI Launch Service</em> to <em>start automatically</em>
on your windows machine, as otherwise MPI-based applications may not start. The easiest way to do so is to execute
the following command in a console (with administrator rights):
\verbatim
sc config MsMpiLaunchSvc start= auto
\endverbatim

Once you have installed MS-MPI and setup the launch service, there is nothing more to do, as the build-system will
automatically detect that an MPI implementation is available.

\subsubsection win_vscode_prereqs_cuda Nvidia CUDA
Nvidia CUDA is not currently supported by the FEAT Visual Studio build system. This will be enabled at a later date.

\subsubsection win_vscode_prereqs_imkl Intel MKL
Intel MKL is not currently supported by the FEAT Visual Studio build system. This will be enabled at a later date.

\section vscode_setup VScode setup

Before configuring FEAT with <c>VScode</c> for the first time, we need to set up a few things in <c>VScode</c>.
First of all, you need to install (by Microsoft recommended) the <c>C/C++</c> toolset extension , which consists of <c>C/C++</c> language support,
in particular debugger, <c>AutoComplete</c> and <c>IntelliSense</c> support, <c>CMake</c> language support and, very importantly, the <c>CMake Tools</c> extension,
which handles the configuration of <c>CMake</c> projects as well as building and project support for <c>IntelliSense</c>.

Once installed, the first thing you need to do is find your compiler toolchain.
To do this, press
\verbatim
 CTRL + Shift + P
 \endverbatim
 to activate the <c>VScode</c> commandline and type in
 \verbatim
 Cmake kit
 \endverbatim
 and choose the option <c>select kit</c> and then <c>scan for kits</c>.
 Compiler you want/should use.
 Select it, which changes the selected toolkit in the box at the bottom (blue) line of the <c>VScode</c> window.

 \note
 A few things to keep in mind:
 FEAT's ctesting does not work with multiple threads. For this reason, with
 \verbatim
 CTRL + Shift + P   -> Preferences: Open Settings(UI)
 \endverbatim
 set
 \verbatim
 Extensions ->  CMake Tools -> Ctest: Parallel Jobs
 \endverbatim
 0 to 1.

 You can also change some parameters here, such as the name and path of your build directory and so on.
 Just use the defaults for now.

 \note
 For now, ignore any recommandation prompts <c>VScode</c> gives.


 \section vscode_configuration_setup Configuration Setup
 Before we can configure the FEAT <c>CMake</c> project, we need to run the Python script <c>configureVScode.py</c> from our workfolder.
 To do this, open an internal terminal by typing
 \verbatim
 CTRL + Shift + `
 \endverbatim

 This configure script works similarly to the "standard" configure script used to configure FEAT under GNU without IDE support,
 but instead of triggering the <c>CMake</c> call itself, it simply edits the <c>cmake-variants.json</c> file , which is then used to
 to configure and build FEAT in <c>VScode</c>.
 The simplest way to do this is to use
 \verbatim
 python3 configureVScode.py gcc
 \endverbatim
 or
 \verbatim
 python3 configureVScode.py clang
 \endverbatim
 which provides the simplest setup of four variants for your chosen compiler, differing in the selected optimization type.

 \note See
  \verbatim
 python3 configureVScode.py --help
 \endverbatim
 for various options and flags for setting up FEAT variants.
 Importantly, we differentiate between four variant types. First of all the optimization type, i.e. <c>opt, debug, fast</c> or <c>noop</c>, then the
 "standard" thirdparties, with <c>thirdparty</c> enabling <b>ALL</b> selected non-mpi thirdparties and <c>thirdparty-off</c> disabling all thirdparties.
 Furthermore the <c>mpi</c> variant, with <c>mpi-off</c> disabling mpi, <c>mpi</c> enabling only mpi and <c>mpi-thirdparty</c> enabling mpi and all selected thirdparties
 requiring mpi.
 At last there is also the <c>cuda</c> variant, enabling or disabling cuda.

 \attention
 Due to <c>CMake Tools</c>, changes to the variants file are not automatically registered by <c>VScode</c>. After running the configure script, you will need to restart <c>VScode</c>.
 This can be easily done by using
 \verbatim
 CTRL + Shift + P -> Reload window
 \endverbatim

 \attention
 If a third-party library is not found in your third-party folder, it will be downloaded automatically.
 For this reason (and others) you should place your FEAT source directory somewhere where you do not need root or admin rights to write/modify files.

 \note If you want to change your FEAT build, you will need to re-run the configuration script and repeat the steps above.

 \section vscode_cmake_tools Working with CMake Tools

 \subsection vscode_cmake_configure Configuring FEAT
  Before configuring, you should first select your build variant by using
 \verbatim
 CTRL + Shift + P -> Cmake variant
 \endverbatim

 After choosing your variant, VScode will automatically start a (shallow) <c>CMake</c> configuration and you should be able to build your first programs.

 \attention If something does not work, or you get a configuration warning, you should do a clean configuration using
  \verbatim
 CTRL + Shift + P -> Cmake delete cache and reconfigure
 \endverbatim

 \subsection vscode_cmake_build Building FEAT
 While you can now change to your build directory (by default, just the ./build folder in your working directory) and build from the command line
 (e.g. with make if that is your chosen build system), you can also use <c>CMake Tools</c> to build executables in FEAT.
 As an example, let us build the first tutorial.
 With
 \verbatim
 CTRL + Shift + P -> Build target -> tutorial-01
 \endverbatim
 you can compile the first tutorial executable. Of course, this will take a moment as FEAT has to be built from scratch.
 Once this is done (successfully), we can run our tutorial.

 \note
 After the first configuration, you can run ctest with
 \verbatim
 CTRL + Shift + P -> Ctest
 \endverbatim
 to verify that everything is working. Note that you need to set the number of ctest threads to 1 as described above.

 \attention Ctest in combination with MPI is currently broken with the WINMPI implementation.

 \section vscode_cmake_run Running FEAT
 You can either run from the command line in your build directory, or via <c>CMake run</c>.
 If you want to provide command line arguments, you need to edit the <b>settings.json </b> file with
 \verbatim
 "cmake.debugConfig": {
        "args": [
            "MyArgument"
        ]
    }
 \endverbatim

 \section vscode_editor Working with VScode
 For a good introduction, refer to <a href="https://github.com/microsoft/vscode-cmake-tools/blob/main/docs/README.md"><c>CMake Tools'</c> Github page</a>.
 \subsection intellisense_filediscovery Problems with file discovery
 The file detection process and subsequent file parsing can be a bit temperamental, especially if the files are not local to the running process (e.g. a shared file system).
 While there are still a few things to optimise, it helps to wait until the parsing process has finished before opening any <c>C/C++</c> files, to avoid the IntelliSense process
 from trying to parse the current file, as this seems to interact with the detection/parsing process.
 You can see if file detection/parsing is currently running by hovering over the "container" icon, which is aligned to the left of the right status icons of the blue CMake tools status bar,
 see the image.
 \image html images/vs_code_statusbar.png

 If there is no change or it reports as halted, reload your window and do a clean reconfigure.
 \note
 IntelliSense parses every folder in the <c>PATH</c> variable, so it is advisable not to allow discovery of large folders that are not needed to compile FEAT.
 If detection is slow, it may help to exclude the <c>/usr/include</c> folder (especially on a shared file system).
 To do this, open the VScode <c>settings</c> menu, select the workspace settings and search for
 \verbatim
 C_cpp files: exclude
 \endverbatim
 Click on the <c>Edit in settings.json</c> option and add to the list in <c>"C_Cpp.files.exclude"</c>
 \verbatim
 "/usr/include": true
 \endverbatim
 The entry in the <c>json</c> file should be as follows
 \verbatim
 "C_Cpp.files.exclude": {
        "/usr/include": true,
        "**/.vscode": true,
        "**/.vs": true
    }
 \endverbatim
 If you want to see, which folders are included in your <c>PATH</c>, check
 \verbatim
 C/Cpp: Log Diagnostics
 \endverbatim

 \attention
 If you create a new <c>header file</c> which is not included anywhere in the project, you will see an include error generated by IntelliSense for any <c>header file</c>.
 To fix this, simply add the new <c>header file</c>, i.e. the file where you see the error, not the include target, to any source list of an executable.
 While this does not change the build process, it fixes the bug.

 \note
 You should also add <c> ms-vscode.cmake-tools </c> to the default <c>configuration provider</c> setting of IntelliSense.

\section clangd Using clangd as Language Server
Instead of using the C/C++ extension of Microsoft, using clangd as language server can improve performance espacially on the side of file disovery.
While there are a few disadvanteges, mainly the missing parsing of doxygen comments (which is a feature request momentarily under <a href="https://github.com/clangd/clangd/issues/529"> review</a> ),
it should be considered if you are running into problems with the IntelliSense setup.

\subsection clangd_setup Setup of clangd
First of all, you should have a clangd installed in your system.
Since clangd is part of the LLVM project, it should be part of your clang installation.
To test this, and get the path to yopu clangd installation, simply type into a terminal
\verbatim
which clangd
\endverbatim

After you have confirmed the location of your clangd installation, search in <c>VScode</c> extentions the clangd plug-in,
which handles the configuration of the language server.
You will also see a prompt asking which language server should be your default provider, choose clangd.
Then, add to your settings file:
\verbatim
"C_Cpp.intelliSenseEngine": "disabled", //disable intellisense lsp
"clangd.path": "/path/to/your/clangd",
"clangd.arguments": ["-log=verbose",
                      "-pretty",
                      "--background-index",
                      "--compile-commands-dir=${workspaceFolder}/build"]
\endverbatim

which disables IntelliSense and add a few options to the clangd language server.
One important thing is <c>"--compile-commands-dir=${workspaceFolder}/build"</c>, which provides the path to the
<c>compile_commands.json</c> file.
This file provides the building information, clangd needs to correctly parse you project and can fortunally be automatically build by <c>CMake</c>.
To do this, simply add
\verbatim
--export_compile_commands
\endverbatim
to the config call of the <c>FEAT3</c> configuration, e.g. either <c>configure</c> or <c>configureVScode</c>.

To reduce the load IntelliSense has on the system, you can also add to your settings file
\verbatim
"C_Cpp.intelliSenseCacheSize": 0,
"C_Cpp.intelliSenseMemoryLimit": 256,
"C_Cpp.autocomplete": "disabled",
"C_Cpp.hover": "disabled"
\endverbatim

\note
If you do not require debugging capabilities, for which we still need IntelliSense, you can deactivate the C/C++ extension complettly, since everything
else should be handled by clangd.

\subsection clangd_config Configuring clangd

It can be very helpful to provide clangd with extra information in you sourcefiles (for example extra include or typedefs), which are unecessary or even wrong
in the actual build process.
This can very well happen, if for example a header file depends on a prior include of another header, which is done on application level (as for example done in the new
ccnd applications).
To differentiate between clangd compilation and any other, we add an additional compile flag to our clangd setup.
For this create a file under the local config directory <c>~/.config/clangd</c>(if it does not exist, create it) named <c>config.yaml</c>.
Here simply add
\verbatim
CompileFlags:
  Add: [-D_CLANGD=1]
\endverbatim

Which adds a compiler definition <c>_CLANGD</c> which can be checked with a <c>#ifdef</c> pre-compiler call.

/TODO: Add additional configuration options and information regarding cland-tidy .

\author Maximilian Esser
**/