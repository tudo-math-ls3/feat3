// FEAT3: Finite Element Analysis Toolbox, Version 3
// Copyright (C) 2010 by Stefan Turek & the FEAT group
// FEAT3 is released under the GNU General Public License version 3,
// see the file 'copyright.txt' in the top level directory for details.

#pragma once

#include <kernel/base_header.hpp>
#include <kernel/util/assertion.hpp>
#include <kernel/util/dist.hpp>
#include <kernel/lafem/dense_vector.hpp>

#include <vector>

namespace FEAT
{
  namespace Global
  {
    /**
     * \brief Global multiplexer/demultiplexer implementation
     *
     * This class provides the functionality for the transfer of primal and dual vectors between
     * different (nested) partitionings in the domain decomposition approach, including the N:1
     * joining and 1:N splitting of vectors from a partitioned mesh to the unpartitioned mesh,
     * which is provided by the Global::Splitter class, which uses the Global::Muxer to outsource
     * the actual dirty work. This class is effectively only required by an application directly
     * when using a multigrid hierarchy in combination with recursive partitioning.
     *
     * Just like Gate class, each Muxer object is bound to a single space-vector pair, so if you
     * require muxer functionality for different vector types, you have to create a different Muxer
     * for each space-vector type pair. You can also utilize the convert() functions to create a
     * new Muxer object from an existing one, assuming that the space object is the same.
     *
     * \tparam LocalVector_
     * The local vector type that the muxer is to be applied onto.
     *
     * \tparam Mirror_
     * The mirror type that is to be used.
     *
     * To set up an object of this class, one requires various information from the underlying
     * partitioning, especially regarding the parent-child and sibling relations between the
     * processes that are joined/split when transitioning between two partitionings. Basically,
     * the following steps have to be performed:
     * -# On each process, call the set_parent() function and provide the sibling communicator,
     *    which groups all processes which are to be joined into one parent process, as well as
     *    the rank of the remaining parent process with respect to the sibling communicator as
     *    well as the identity mirror for all DOFs.
     * -# On the parent process, call the push_child() function and provide the mirror for each
     *    corresponding child patch, which can be assembled from the 'patch:' meshparts that
     *    are (hopefully) generated by the partitioner.
     * -# Compile the muxer by calling the compile() function and supplying it with a temporary
     *    local vector.
     *
     * To perform the actual transition between two partitionings, the functions required to be
     * called differ depending on the whether the calling process is a parent process, i.e. it
     * is an active process in both the child and parent communicators, or whether it is only
     * a simple child process, i.e. is only active in the child communicator.
     * On each parent process, the caller has to call the join() or split() functions, which
     * require both the coarse and fine partitioning input/output vectors.
     * On all other child processes, the caller has to call the join_send() function, which
     * only requires the fine partitioning input vector, or the split_recv() function, which only
     * requires the fine partitioning output vector.
     *
     * \author Peter Zajac
     */
    template<typename LocalVector_, typename Mirror_>
    class Muxer
    {
    public:
      /// the data type
      typedef typename LocalVector_::DataType DataType;
      /// the index type
      typedef typename LocalVector_::IndexType IndexType;
      /// the local vector type
      typedef LocalVector_ LocalVectorType;
      /// the mirror type
      typedef Mirror_ MirrorType;
      /// the internal buffer vector type
      typedef LAFEM::DenseVector<DataType, IndexType> BufferType;

      /// Our 'base' class type
      template <typename LocalVector2_, typename Mirror2_>
      using MuxerType = Muxer<LocalVector2_, Mirror2_>;

      /// this typedef lets you create a gate container with new Data and Index types
      template <typename DataType2_, typename IndexType2_>
      using MuxerTypeByDI = Muxer<
        typename LocalVector_::template ContainerType<DataType2_, IndexType2_>,
        typename Mirror_::template MirrorType<DataType2_, IndexType2_> >;

    public:
      /// the sibling communicator
      const Dist::Comm* _sibling_comm;

      /// the rank of the parent
      int _parent_rank;

      /// buffer size
      Index _buffer_size;

      /// parent mirror (on all children)
      Mirror_ _parent_mirror;

      /// child mirrors (only on parent)
      std::vector<Mirror_> _child_mirrors;

    public:
      /// standard constructor
      Muxer() :
        _sibling_comm(nullptr),
        _parent_rank(-1),
        _buffer_size(0),
        _parent_mirror(),
        _child_mirrors()
      {
      }

      /// move-constructor
      Muxer(Muxer&& other) :
        _sibling_comm(other._sibling_comm),
        _parent_rank(other._parent_rank),
        _buffer_size(other._buffer_size),
        _parent_mirror(std::forward<Mirror_>(other._parent_mirror)),
        _child_mirrors(std::forward<std::vector<Mirror_>>(other._child_mirrors))
      {
      }

      /// virtual destructor
      virtual ~Muxer()
      {
      }

      /// move-assignment operator
      Muxer& operator=(Muxer&& other)
      {
        if(this == &other)
          return *this;

        _sibling_comm = other._sibling_comm;
        _parent_rank = other._parent_rank;
        _buffer_size = other._buffer_size;
        _parent_mirror = std::forward<Mirror_>(other._parent_mirror);
        _child_mirrors = std::forward<std::vector<Mirror_>>(other._child_mirrors);

        return *this;
      }

      /**
       * \brief Conversion function for same vector container type but with different MDI-Type
       *
       * \param[in] other
       * A \transient reference to the muxer to convert from
       */
      template<typename LVT2_, typename MT2_>
      void convert(const Muxer<LVT2_, MT2_>& other)
      {
        if((void*)this == (void*)&other)
          return;

        this->_sibling_comm = other._sibling_comm;
        this->_parent_rank = other._parent_rank;
        this->_buffer_size = other._buffer_size;
        this->_parent_mirror.convert(other._parent_mirror);

        this->_child_mirrors.resize(other._child_mirrors.size());
        for(std::size_t i(0); i < other._child_mirrors.size(); ++i)
        {
          this->_child_mirrors.at(i).convert(other._child_mirrors.at(i));
        }
      }

      /**
       * \brief Conversion function for different vector container type
       *
       * This function (re)creates this gate from another muxer with a different vector type, but the same mirrors.
       * This can be used to create a gate using DenseVectorBlocked from a muxer using DenseVector or vice versa.
       *
       * \param[in] other
       * A (transient) reference to the muxer using the other vector type to create this muxer from.
       *
       * \param[in] vector
       * A temporary vector allocated to the correct size that is to be used for internal initialization.
       *
       * \param[in] mode
       * The clone-mode to be used for cloning the mirrors. Defaults to shallow clone.
       */
      template<typename LVT2_>
      void convert(const Muxer<LVT2_, Mirror_>& other, LocalVector_&& vector, LAFEM::CloneMode mode = LAFEM::CloneMode::Shallow)
      {
        if((void*)this == (void*)&other)
          return;

        this->_sibling_comm = other._sibling_comm;
        this->_parent_rank = other._parent_rank;
        this->_buffer_size = Index(0); // will be rebuild by compile function
        this->_parent_mirror.clone(other._parent_mirror, mode);

        this->_child_mirrors.clear();
        this->_child_mirrors.resize(other._child_mirrors.size());

        for(std::size_t i(0); i < other._child_mirrors.size(); ++i)
        {
          this->_child_mirrors.at(i).clone(other._child_mirrors.at(i), mode);
        }

        // compile this muxer
        compile(std::forward<LocalVector_>(vector));
      }

      /// Returns the internal data size in bytes.
      std::size_t bytes() const
      {
        std::size_t b = _parent_mirror.bytes();
        for(const auto& cm : _child_mirrors)
          b += cm.bytes();
        return b;
      }

      /**
       * \brief Specifies whether this process represents a child in the muxer.
       *
       * \returns
       * \c true, if this process is a child, otherwise \c false.
       */
      bool is_child() const
      {
        return (_sibling_comm != nullptr) && (_sibling_comm->size() > 0);
      }

      /**
       * \brief Specifies whether this process represents a parent in the muxer.
       *
       * \returns
       * \c true, if this process is a parent, otherwise \c false.
       */
      bool is_parent() const
      {
        return (_sibling_comm != nullptr) && (_sibling_comm->rank() == _parent_rank);
      }

      /**
       * \brief Specifies whether this process is a ghost in the muxer.
       *
       * \note
       * A ghost is a child process, which is not a parent process.
       *
       * \returns
       * \c true, if this process is a ghost, otherwise \c false.
       */
      bool is_ghost() const
      {
        return is_child() && (!is_parent());
      }

      /**
       * \brief Returns the sibling communicator.
       *
       * \returns The sibling communicator.
       */
      const Dist::Comm* get_sibling_comm() const
      {
        return _sibling_comm;
      }

      /**
       * \brief Sets the sibling communicator.
       *
       * \param[in] sibling_comm_
       * A \resident pointer to the sibling communicator.
       *
       * \param[in] parent_rank
       * The rank of the parent process in the sibling comm.
       *
       * \param[in] parent_mirror
       * The parent mirror.
       */
      void set_parent(const Dist::Comm* sibling_comm_, int parent_rank, Mirror_&& parent_mirror)
      {
        _sibling_comm = sibling_comm_;
        XASSERT(_sibling_comm != nullptr);
        XASSERT(parent_rank >= 0);
        XASSERT(parent_rank < _sibling_comm->size());
        _parent_rank = parent_rank;
        _parent_mirror = std::forward<Mirror_>(parent_mirror);
      }

      /**
       * \brief Returns the parent rank
       *
       * \returns The parent rank
       */
      int get_parent_rank() const
      {
        return _parent_rank;
      }

      /**
       * \brief Returns the parent mirror
       *
       * \returns The parent mirror
       */
      const Mirror_& get_parent_mirror() const
      {
        return _parent_mirror;
      }

      /**
       * \brief Adds a child rank and mirror for a parent process.
       *
       * \param[in] child_mirror
       * The mirror of the child patch of this parent process.
       */
      void push_child(Mirror_&& child_mirror)
      {
        _child_mirrors.push_back(std::forward<Mirror_>(child_mirror));
      }

      /**
       * \brief Returns the child mirror vector
       *
       * \returns The child mirror vector
       */
      const std::vector<Mirror_>& get_child_mirrors() const
      {
        return _child_mirrors;
      }

      /**
       * \brief Compiles the muxer.
       *
       * \param[in] vec_tmp_
       * A \transient reference to a temporary vector for internal use.
       */
      void compile(const LocalVector_& vec_tmp_)
      {
        if(!is_child())
          return; // nothing to

        XASSERT(_sibling_comm != nullptr);
        XASSERT(_parent_rank >= 0);
        XASSERT(_parent_rank < _sibling_comm->size());

        Index bufsize(0);

        // Is this the parent?
        if(_sibling_comm->rank() == _parent_rank)
        {
          // loop over all child buffers and compute the largest buffer size
          for(const auto& cm : _child_mirrors)
          {
            bufsize = Math::max(bufsize, cm.buffer_size(vec_tmp_));
          }
        }

        // broadcast buffer size to all siblings
        _sibling_comm->bcast(&bufsize, std::size_t(1), _parent_rank);

        // verify against length of parent buffer
        XASSERT(bufsize >= _parent_mirror.buffer_size(vec_tmp_));

        // store buffer size
        this->_buffer_size = bufsize;
      }

      /**
       * \brief Sends a join operation to the parent process.
       *
       * \param[in] vec_src
       * A \transient reference to the type-0 child vector that is to be joined on the parent process.
       *
       * \note
       * This function returns immediately after the parent process has gathered all contributions
       * from its siblings and does not block or barrier any further.
       */
      void join_send(const LocalVector_& vec_src) const
      {
        XASSERT(_sibling_comm != nullptr);
        XASSERT(_sibling_comm->size() > 1);
        XASSERT(_sibling_comm->rank() != _parent_rank); // parent must call join() instead

        // create parent buffer in device memory
        BufferType parent_buffer(_buffer_size);

        // gather source to parent buffer
        _parent_mirror.gather(parent_buffer, vec_src);

        // gather to parent sibling
        DataType* dummy = nullptr;
        _sibling_comm->gather(parent_buffer.elements(), _buffer_size, dummy, std::size_t(0), _parent_rank);
      }

      /**
       * \brief Performs a join operation on the parent process.
       *
       * \param[in] vec_src
       * A \transient reference to the type-0 child vector that is to be joined on the parent process.
       *
       * \param[in] vec_trg
       * A \transient reference to the joined type-0 parent vector.
       */
      void join(const LocalVector_& vec_src, LocalVector_& vec_trg) const
      {
        // if this muxer is not a child, then this operation is a simple copy
        if((_sibling_comm == nullptr) || (_sibling_comm->size() <= 1))
        {
          vec_trg.copy(vec_src);
          return;
        }

        XASSERT(_sibling_comm != nullptr);
        XASSERT(_sibling_comm->size() > 0);
        XASSERT(_sibling_comm->rank() == _parent_rank);

        const Index num_children = Index(_child_mirrors.size());

        // allocate parent buffer
        BufferType parent_buffer(_buffer_size);

        // gather source to parent buffer
        _parent_mirror.gather(parent_buffer, vec_src);

        // allocate child buffers
        BufferType child_buffers(_buffer_size * num_children);

        // gather from siblings
        _sibling_comm->gather(parent_buffer.elements(), _buffer_size, child_buffers.elements(), _buffer_size, _parent_rank);

        // format target vector
        vec_trg.format();

        // scatter child buffers into target vector
        for(Index i(0); i < num_children; ++i)
        {
          // scatter buffers
          _child_mirrors.at(i).scatter_axpy(vec_trg, child_buffers, DataType(1), i*_buffer_size);
        }
      }

      /**
       * \brief Receives a split operation from the parent process.
       *
       * \param[out] vec_trg
       * A \transient reference to the split type-1 child vector.
       *
       * \note
       * This function posts a blocking scatter which will only unblock once the parent process
       * has scattered the data to all its siblings.
       */
      void split_recv(LocalVector_& vec_trg) const
      {
        XASSERT(_sibling_comm != nullptr);
        XASSERT(_sibling_comm->size() > 1);
        XASSERT(_sibling_comm->rank() != _parent_rank); // parent must call split() instead

        // allocate parent buffer
        BufferType parent_buffer(_buffer_size);

        // receive scatter from parent sibling
        DataType* dummy = nullptr;
        _sibling_comm->scatter(dummy, std::size_t(0), parent_buffer.elements(), _buffer_size, _parent_rank);

        // scatter into target vector
        vec_trg.format();
        _parent_mirror.scatter_axpy(vec_trg, parent_buffer);
      }

      /**
       * \brief Performs a split operation on the parent process.
       *
       * \param[out] vec_trg
       * A \transient reference to the split type-1 child vector.
       *
       * \param[in] vec_src
       * A \transient reference to the type-1 parent vector that is to be split
       */
      void split(LocalVector_& vec_trg, const LocalVector_& vec_src) const
      {
        // if this muxer is not a child, then this operation is a simple copy
        if((_sibling_comm == nullptr) || (_sibling_comm->size() <= 1))
        {
          vec_trg.copy(vec_src);
          return;
        }

        XASSERT(_sibling_comm != nullptr);
        XASSERT(_sibling_comm->size() > 0);
        XASSERT(_sibling_comm->rank() == _parent_rank);

        TimeStamp ts_execute;

        const Index num_children = Index(_child_mirrors.size());

        // allocate child buffers
        BufferType child_buffers(_buffer_size * num_children);

        // gather child buffers from target vector
        for(Index i(0); i < num_children; ++i)
        {
          _child_mirrors.at(i).gather(child_buffers, vec_src, i*_buffer_size);
        }

        // create parent buffer
        BufferType parent_buffer(_buffer_size);

        // scatter to siblings
        _sibling_comm->scatter(child_buffers.elements(), _buffer_size, parent_buffer.elements(), _buffer_size, _parent_rank);

        // scatter into target vector
        vec_trg.format();
        _parent_mirror.scatter_axpy(vec_trg, parent_buffer);
      }
    }; // class Muxer<...>
  } // namespace Global
} // namespace FEAT
