#!/bin/sh
#
# Copy or link this file as ".git/hooks/pre-commit".

die() {
	echo 'pre-commit hook failure' 1>&2
	echo '-----------------------' 1>&2
	echo '' 1>&2
	echo "$@" 1>&2
	exit 1
}

zero='0000000000000000000000000000000000000000'

#-----------------------------------------------------------------------------
# Check for committer identity.
advice='
Use the commands

	git config --global user.name '\''Your Name'\''
	git config --global user.email '\''you@yourdomain.com'\''

to introduce yourself to Git before committing.'

# Ensure name and email are available.
git config --get user.name > /dev/null &&
git config --get user.email > /dev/null ||
die 'Identity not configured!' "$advice"

# Validate the name and email.
git config --get user.name | grep ' ' > /dev/null ||
die 'Set user.name to your Real Name (with a space), not a userid.' "$advice"
git config --get user.email | grep '^[^@]*@[^@]*$' > /dev/null ||
die 'Set user.email to an email address (userid@validdomain.com).' "$advice"

#-----------------------------------------------------------------------------
# Check content that will be added by this commit.

if git rev-parse --verify -q HEAD > /dev/null; then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

# Disallow non-ascii file names.  The printable range starts at the
# space character and ends with tilde.
if test "$(git diff --cached --name-only --diff-filter=A -z $against |
	   LC_ALL=C tr -d '[ -~]\0')"; then
	die 'Non-ascii file names may not be added:
'"$(git diff --cached --name-only --diff-filter=A $against)"
fi

#-----------------------------------------------------------------------------
# Builtin whitespace checks.
bad=$(git diff-index --check --cached $against --) || die "$bad"

#-----------------------------------------------------------------------------
# Reject leading TABs.
check_tab() {
	git diff-index -p --cached $against -- "$1" |
	grep '^+	' > /dev/null &&
	echo "  $1"
}
check_file() {
	case "$1" in
		*.c)		check_tab "$1" ;;
		*.h)		check_tab "$1" ;;
		*.cxx)		check_tab "$1" ;;
		*.txx)		check_tab "$1" ;;
		*.hxx)		check_tab "$1" ;;
		*.htm)		check_tab "$1" ;;
		*.html)		check_tab "$1" ;;
		*.txt)		check_tab "$1" ;;
		*.cmake)	check_tab "$1" ;;
	esac
}
bad=$(git diff-index --name-only --cached $against -- |
while read file; do
	check_file "$file"
done)
test -z "$bad" || die 'Leading TABs added in
'"$bad"'
Convert them to spaces (2 per TAB) before commit.'

#-----------------------------------------------------------------------------
# Check file modes and sizes.
mode_looks_exe() {
	case "$1" in
		*.bat) return 0 ;;
		*.cmd) return 0 ;;
		*.exe) return 0 ;;
		*.com) return 0 ;;
	esac
	git cat-file blob "$2" | head -1 | grep "^#!/" > /dev/null
}
mode_not_exe () {
	echo "The file '$file' has looks executable but does not have an executable mode."
}
mode_bad_exe () {
	echo "The file '$file' has executable mode but does not look executable."
}
mode_non_file () {
	echo "The path '$file' has a non-file mode."
}
check_mode() {
	case "$dst_mode" in
		100755) mode_looks_exe "$file" "$dst_obj" || mode_bad_exe ;;
		100644) mode_looks_exe "$file" "$dst_obj" && mode_not_exe ;;
		160000) ;;
		*)	mode_non_file ;;
	esac
}

size_max_KiB=$(git config hooks.MaxObjectKiB)
test -n "$size_max_KiB" || size_max_KiB=1024
size_too_large() {
	echo "The path '$file' has size $file_KiB KiB, greater than the maximum $size_max_KiB KiB."
	echo 'Run "git config hooks.MaxObjectKiB $KiB" to set local limit, 0 to disable.'
}
check_size() {
	if test "$size_max_KiB" -gt "0" -a "$dst_obj" != "$zero"; then
		file_KiB=$(expr '(' $(git cat-file -s "$dst_obj") + 1023 ')' / 1024)
		test "$file_KiB" -le "$size_max_KiB" || size_too_large
	fi
}

bad=$(git diff-index --cached $against -- |
sed -n '/^:[^:]/ {s/^://;p;}' |
while read src_mode dst_mode src_obj dst_obj status file; do
	if test "$src_mode" != "$dst_mode" -a "$dst_mode" != "000000"; then
		check_mode
	fi
	if test "$dst_mode" != "160000" -a "$dst_mode" != '000000'; then
		check_size
	fi
done)
test -z "$bad" || die "$bad"
