#!/usr/bin/env python3
# vim: set filetype=python sw=2 sts=2 et nofoldenable :

# FEAT3: Finite Element Analysis Toolbox, Version 3
# Copyright (C) 2010 - 2024 by Stefan Turek & the FEAT group
# FEAT3 is released under the GNU General Public License version 3,
# see the file 'copyright.txt' in the top level directory for details.

import sys
import subprocess
import os
import shutil
import copy
import platform

sys.dont_write_bytecode = True
from build_system.detect_cpu import detect_cpu
from build_system.configure_gcc import configure_gcc
from build_system.configure_icc import configure_icc
from build_system.configure_icx import configure_icx
from build_system.configure_clang import configure_clang
from build_system.configure_cray import configure_cray
from build_system.feat_util import remove_string
from build_system.feat_util import remove_substring
from build_system.feat_util import is_found
from build_system.feat_util import find_exe
from build_system.feat_util import get_output
from build_system.thirdparty_package import *
from build_system.is_subdirectory import *

# print help message if desired
if len(sys.argv) > 1 and ("help" in sys.argv[1:] or "?" in sys.argv[1:]):
  #                1         2         3         4         5         6         7         8         9         0
  #       123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-123456789-
  print ("")
  print ("USAGE: configure [build-id]/[guess]/[help] [additional-options]")
  print ("")
  print ("Configures FEAT3 and sets up all necessary environment variables.")
  print ("")
  print ("The build system of FEAT3 is intended to be configured in a separate build directory, which shall")
  print ("not be a sub-directory of the source directory. This way, your source directory will remain clean")
  print ("of any object files and compiled binaries. Please create a build directory at a location of your")
  print ("choice and call this configure script from within that folder and supply either the tag 'guess'")
  print ("or a valid 'build-id' (see below) to configure your FEAT3 compilation.")
  print ("")
  print ("============= REQUIREMENTS ==================")
  print ("Needs CMake (at least version 3.18.0) to run properly.")
  print ("")
  print ("============== BUILD-ID ====================")
  print ("The FEAT3 build-id is a string of various keyword tokens, delimited by either hyphens or spaces,")
  print ("which are used to select a compiler, configure the build mode and enable additional functionality.")
  print ("A valid build-id requires at least a compiler tag and a build mode tag, all other tags are optional.")
  print ("")
  print ("The following build-id tags, grouped by category, are currently supported by this scripts:")
  print ("")
  print ("* Compiler suite (mutually exclusive):")
  print ("  - 'gcc': use the GNU C++ compiler, version 7.0 or newer (binaries 'gcc' and 'g++')")
  print ("  - 'icc': use the Intel C/C++ compiler, version 19.0 or newer (binaries 'icc' and 'icpc')")
  print ("  - 'icx': use the oneAPI DPC++/C++ compiler, version 2021 or newer (binaries 'icx' and 'icpx')")
  print ("  - 'clang': use the Clang LLVM compiler, version 19.0 or newer (binaries 'clang' and 'clang++')")
  print ("  - 'cray': use the Cray C/C++ compiler")
  print ("")
  print ("* Build mode (mutually exclusive):")
  print ("  - 'opt': compile in optimized mode (recommended)")
  print ("  - 'debug': compile in debug mode and disable all optimizations")
  print ("  - 'fast': compile in optimized mode including non-standard optimizations")
  print ("  - 'nopt': compile in non-optimized mode")
  print ("")
  print ("* Parallelization backends:")
  print ("  - 'mpi': enable MPI-based cluster parallelization")
  print ("  - 'cuda': enable Nvidia CUDA-based GPU parallelization")
  print ("  - 'mkl': enable Intel MKL-based thread parallelization")
  print ("")
  print ("* CMake generators:")
  print (" - 'unixmake': generate GNU make makefiles (default)")
  print (" - 'ninja': generate ninja files")
  print (" - 'xcode': generate XCode project files")
  print ("")
  print ("* Build system extensions")
  print (" - 'ccache': enable ccache")
  print (" - 'cotire': enable cotire")
  print ("")
  print ("* Instrumentation:")
  print (" - 'scorep': enable instrumentation by Score-P")
  print (" - 'likwid': enable instrumentation by LIKWID")
  print ("")
  print ("* Additional debugging features:")
  print (" - 'valgrind': set proper suppressions and flags for valgrind")
  print (" - 'cudamemcheck': enable cuda memcheck (only in combination with CUDA)")
  print (" - 'sanitizer': enable sanitize compiler flags")
  print ("")
  print ("* Additional optimization features:")
  print (" - 'lto': enable link-time optimizations")
  print ("")
  print ("* Additional floating point formats:")
  print ("  - 'quadmath': enable libquadmath __float128 type (GCC only)")
  print ("  - 'half': enable CUDA half type (requires CUDA)")
  print ("")
  print ("* Additional third-party libraries:")
  print ("- 'alglib': download and build ALGLIB library from source")
  print ("- 'boost': download and include BOOST header library")
  print ("- 'cgal': download and include CGAL header library (requires BOOST)")
  print ("- 'deathhandler': download and build deathhandler library")
  print ("- 'fparser': download and build fparser library")
  print ("- 'floatx': download and include floatx header library")
  print ("- 'hypre': download and build HYPRE library")
  print ("- 'metis': download and build METIS and ParMETIS libraries")
  print ("- 'superlu': download and build SuperLU_Dist library")
  print ("- 'trilinos': link against pre-built Trilinos library")
  print ("- 'umfpack': download and build UMFPACK library")
  print ("- 'zlib': download and build ZLIB library")
  print ("- 'zoltan': download and build Zoltan library")
  print ("")
  print ("Note that the actual compiler version and mpi implementation is chosen by the")
  print ("'first come, first served' principle corresponding to your $PATH settings.")
  print ("")
  print ("============== ADDITIONAL OPTIONS ==============")
  print ("--system_host_compiler=/usr/bin/gcc")
  print ("  Selects the system compiler (and header files) used by icc, icx and clang.")
  print ("  Be aware that icc/icx needs the path to a gcc binary and clang needs the path to folder")
  print( "  containing the whole toolchain.")
  print ("")
  print ("--cuda_host_compiler=/usr/bin/gcc")
  print ("  Selects the system compiler (and header files) used by nvcc.")
  print ("")
  print ("--cuda_arch=sm_60")
  print ("  Selects the cuda architecture target (defaults to sm_60 if not set).")
  print ("")
  print ("--export_compile_commands")
  print ("  Let CMake export the used compile commands to compile_commands.json.")
  print ("")
  print ("--cpu=cputype")
  print ("  Override cpu auto detection with provided string (see build_system/detect_cpu.py for a list).")
  print ("")
  print ("--cxx=path/to/binary")
  print ("  Override default c++ compiler binary by absolute path to binary. This does not replace the")
  print ("  proper compiler statement in the build id.")
  print ("")
  print ("--cc=path/to/binary")
  print ("  Override default c compiler binary by absolute path to binary. This muss 'match' the c++")
  print ("  compiler and the compiler statement in the build id.")
  print ("")
  print ("--cuda_verbose")
  print ("  Be way more verbosive on cuda compilation steps")
  print ("")
  print ("--unroll_banded")
  print ("  Use fancy template meta programming to unroll SparseMatrixBanded kernels.")
  print ("")
  print ("--eickt")
  print ("  Explicitly instantiate common kernel templates.")
  print ("")
  print ("--ovr_mpi_ops")
  print ("  Override MPI operations with custom implementations. Required if both quadmath and MPI are used.")
  print ("")
  print ("--in-source")
  print ("  Allow for in-source builds; not recommended.")
  print ("")
  print ("--mpi_thread_multiple")
  print ("  Use multiple threads for asynchronous mpi calls.")
  print ("")
  print ("--mpi_c=xyz")
  print ("  Set mpi c compiler wrapper to xyz.")
  print ("")
  print ("--mpi_cxx=xyz")
  print ("  Set mpi c++ compiler wrapper to xyz.")
  print ("")
  print ("--mkl_sparse_executor")
  print ("  Use the Intel MKL sparse executor interface.")
  print ("")
  print ("--restrict_errors")
  print ("  Abort compilation after an error is encountered.")
  print ("")
  print ("--trilinos_path")
  print ("  Path to a FROSch compatible Trilinos installation.")
  print ("")
  print ("--likwid_markers=mark1,mark2,mark3")
  print ("  Decide in a comma separated list, which performance markers are activated.")
  print ("  Current choices: kernel app special cuda . Defaults to app.")
  print ("")
  print ("Note that the first gcc(g++) in $PATH is chosen as the cuda host compiler, if no other one is provided.")
  print ("Note that these additional options are only valid in build-id mode and not in guess mode.")
  sys.exit()

# get path to feat source trunk
trunk_dirname = os.path.abspath(os.path.dirname(sys.argv[0]))

# clear all related
os.environ["CXXFLAGS"] = ""
os.environ["CXX"] = ""
os.environ["LD"] = ""
os.environ["CC"] = ""
os.environ["LDFLAGS"] = ""
os.environ["OMP_CXX"] = ""
os.environ["OMP_CC"] = ""
os.environ["MPICH_CXX"] = ""
os.environ["MPICH_CC"] = ""

extra_options = []
# separate extra options from build id
for i in range(1, len(sys.argv)):
  if len(sys.argv[i]) > 2 and sys.argv[i][:2] == "--":
    extra_options.append(sys.argv[i])

# check for cmake binary
if not is_found ("cmake"):
  print("Error: no cmake binary found!")
  sys.exit()

# guess a fitting configuration and search for available compilers
if len(sys.argv) == 1 or "guess" in sys.argv:
  buildid_string = "opt"
  if is_found("mpic++") or is_found("mpicxx"):
    buildid_string += "-mpi"
  if is_found("g++"):
    buildid_string += "-gcc"
  elif is_found("icpc"):
    buildid_string += "-icc"
  elif is_found("icpx"):
    buildid_string += "-icx"
  elif is_found("clang++"):
    buildid_string += "-clang"
  else:
    print("Error: no comptabile compiler found nor provided!")
    sys.exit()

# use provided build id
else:
  # add every parameter to the build id that is no extra_option
  buildid_string = ""
  for i in range(1, len(sys.argv)):
    if not (len(sys.argv[i]) > 2 and sys.argv[i][:2] == "--"):
      buildid_string += sys.argv[i] + "-"

buildid_string = buildid_string.strip("-")
# generate handy build id array of tokens
buildid = buildid_string.split("-")
# list of buildid tokens, remove token when used, results in list of unused tokens
unused_tokens = copy.deepcopy(buildid)

# initialize variables
cxxflags = ""
ldflags = ""
cmake_flags = "-DBUILD_ID:STRING=" + buildid_string

# choose makefile generator. missing entry defaults to unix makefiles
if "ninja" in buildid:
  remove_string(unused_tokens, "ninja")
  generator = "Ninja"
elif "xcode" in buildid:
  remove_string(unused_tokens, "xcode")
  generator = "Xcode"
#should not really be needed, as long as you add the appropriate path
# elif "mingw" in buildid:
#   remove_string(unused_tokens, "mingw")
#   generator = "MinGW Makefiles"
# elif "msys" in buildid:
#   remove_string(unused_tokens, "msys")
#   generator = "MSYS Makefiles"
elif "unixmake" in buildid:
  remove_string(unused_tokens, "unixmake")
  generator = "Unix Makefiles"
else:
  generator = "Unix Makefiles"

# optimisation/debug mode aka build mode selection
if "debug" in buildid:
  remove_string(unused_tokens, "debug")
  cmake_flags += " -DFEAT_DEBUG_MODE:BOOL=ON"
elif "nopt" in buildid:
  remove_string(unused_tokens, "nopt")
  cmake_flags += " -DFEAT_DEBUG_MODE:BOOL=ON"
elif "opt" in buildid:
  remove_string(unused_tokens, "opt")
  cmake_flags += " -DFEAT_DEBUG_MODE:BOOL=OFF"
elif "fast" in buildid:
  remove_string(unused_tokens, "fast")
  cmake_flags += " -DFEAT_DEBUG_MODE:BOOL=OFF"
else:
  print ("Error: No supported build mode (opt/debug/fast/nopt) found in build id:")
  print (buildid_string)
  sys.exit(1)

# parallelisation selection
if "mpi" in buildid:
  remove_string(unused_tokens, "mpi")
  cmake_flags += " -DFEAT_HAVE_MPI:BOOL=TRUE"

# evaluate extra options
cputype = ""
system_host_compiler = ""
cuda_host_compiler = ""
compiler_cxx = ""
compiler_cc = ""
cuda_arch = ""
cuda_verbose = False
restrict_errors = False
trilinos_path = ""
marker_options = ""

unused_extra_options = copy.copy(extra_options)
for option in extra_options:
  if option.startswith("--cpu="):
    unused_extra_options.remove(option)
    if cputype:
      print ("Error: multiple cpu parameters in\n" + "\n".join(extra_options))
      exit(1)
    cputype = option.replace("--cpu=", "", 1)

  if option.startswith("--system_host_compiler="):
    unused_extra_options.remove(option)
    if system_host_compiler:
      print ("Error: multiple system_host_compiler parameters in\n" + "\n".join(extra_options))
      exit(1)
    system_host_compiler = option.replace("--system_host_compiler=", "", 1)
    if not os.path.exists(system_host_compiler):
      print ("Error: system_host_compiler " + system_host_compiler + " does not exist!")
    cmake_flags += " -DFEAT_SYSTEM_HOST_COMPILER=" + system_host_compiler

  if option.startswith("--cuda_host_compiler="):
    unused_extra_options.remove(option)
    if cuda_host_compiler:
      print ("Error: multiple cuda_host_compiler parameters in\n" + "\n".join(extra_options))
      exit(1)
    cuda_host_compiler = option.replace("--cuda_host_compiler=", "", 1)
    if not os.path.exists(cuda_host_compiler):
      print ("Error: cuda_host_compiler " + cuda_host_compiler + " does not exist!")

  if option.startswith("--cxx="):
    unused_extra_options.remove(option)
    if compiler_cxx:
      print ("Error: multiple cxx parameters in\n" + "\n".join(extra_options))
      exit(1)
    compiler_cxx = option.replace("--cxx=", "", 1)
    if not os.path.exists(compiler_cxx):
      print ("Error: compiler " + compiler_cxx + " does not exist!")

  if option.startswith("--cc="):
    unused_extra_options.remove(option)
    if compiler_cc:
      print ("Error: multiple cc parameters in\n" + "\n".join(extra_options))
      exit(1)
    compiler_cc = option.replace("--cc=", "", 1)
    if not os.path.exists(compiler_cc):
      print ("Error: compiler " + compiler_cc + " does not exist!")

  if option.startswith("--cuda_arch="):
    unused_extra_options.remove(option)
    if cuda_arch:
      print ("Error: multiple cuda_arch parameters in\n" + "\n".join(extra_options))
      exit(1)
    cuda_arch = option.replace("--cuda_arch=", "", 1)
    cuda_arch_int = int(cuda_arch.split("sm_")[-1])

  if option.startswith("--cuda_verbose"):
    unused_extra_options.remove(option)
    cuda_verbose = True

  if option.startswith("--export_compile_commands"):
    unused_extra_options.remove(option)
    cmake_flags += " -DCMAKE_EXPORT_COMPILE_COMMANDS=ON"

  if option.startswith("--unroll_banded"):
    unused_extra_options.remove(option)
    cmake_flags += " -DFEAT_UNROLL_BANDED:BOOL=TRUE"

  if option.startswith("--eickt"):
    unused_extra_options.remove(option)
    cmake_flags += " -DFEAT_EICKT:BOOL=TRUE"

  if option.startswith("--ovr_mpi_ops"):
    unused_extra_options.remove(option)
    cmake_flags += " -DFEAT_OVERRIDE_MPI_OPS:BOOL=TRUE"

  if option.startswith("--mpi_thread_multiple"):
    unused_extra_options.remove(option)
    cmake_flags +=" -DFEAT_MPI_THREAD_MULTIPLE:BOOL=TRUE"

  if option.startswith("--mpi_c="):
    unused_extra_options.remove(option)
    mpi_c = option.replace("--mpi_c=", "", 1)
    cmake_flags += " -DFEAT_MPI_C:STRING=" + mpi_c

  if option.startswith("--mpi_cxx="):
    unused_extra_options.remove(option)
    mpi_cxx = option.replace("--mpi_cxx=", "", 1)
    cmake_flags += " -DFEAT_MPI_CXX:STRING=" + mpi_cxx

  if option.startswith("--mkl_sparse_executor"):
    unused_extra_options.remove(option)
    cmake_flags += " -DFEAT_USE_MKL_SPARSE_EXECUTOR:BOOL=TRUE"

  if option.startswith("--restrict_errors"):
    unused_extra_options.remove(option)
    restrict_errors = True

  if option.startswith("--trilinos_path="):
    unused_extra_options.remove(option)
    if trilinos_path:
      print ("Error: multiple trilinos_path parameters in\n" + "\n".join(extra_options))
      exit(1)
    trilinos_path = option.replace("--trilinos_path=", "", 1)
    if not os.path.exists(trilinos_path):
      print ("Error: trilinos_path " + trilinos_path + " does not exist!")
    cmake_flags += " -DFEAT_TRILINOS_PATH:FILEPATH=" + trilinos_path

  if option.startswith("--likwid_markers="):
    unused_extra_options.remove(option)
    if marker_options:
      print ("Error: multiple likwid_markers parameters in\n" + "\n".join(extra_options))
      exit(1)
    tmp_marker = option.replace("--likwid_markers=", "", 1)
    if(tmp_marker == ""):
      print ("Error: No options given in " + option)
      exit(1)
    if(len(tmp_marker.split(",")) > 3):
      print ("Error: Too many marker options in " + option)
      exit(1)
    marker_options = ""
    for marker in tmp_marker.split(","):
      if(marker == "app"):
        marker_options += " -DFEAT_APPLICATION_MARKER_ACTIVATED:BOOL=ON"
      if(marker == "kernel"):
        marker_options += " -DFEAT_KERNEL_MARKER_ACTIVATED:BOOL=ON"
      if(marker == "special"):
        marker_options += " -DFEAT_SPECIAL_MARKER_ACTIVATED:BOOL=ON"
      if(marker == "cuda"):
        marker_options += " -DLIKWID_NVMON:BOOL=ON"
    if(not marker_options):
      print ("Error: No valid marker options in " + option)
      print ("Valid options are: kernel app special")
      exit(1)

# check for in-source configure
# [:-9] strips the /configure from sys.argv[0]
if is_subdirectory(os.getcwd(), sys.argv[0][:-9]):
  if not "--in-source" in extra_options:
    print("ERROR: You are trying to configure for an in-source build, which is a really bad idea.")
    print("It is recommended that you call this configure script from a separate build directory.")
    print("If you really insist on an in-source build, you need to specify the '--in-source' option.")
    sys.exit(1)
  else:
    unused_extra_options.remove("--in-source")

# check for in-home configure
if os.path.realpath(os.getcwd()) == os.path.realpath(os.path.expanduser("~")):
  if not "--in-home" in extra_options:
    print("ERROR: You are trying to configure for a build in your home directory, which is a really bad idea.")
    print("It is recommended that you call this configure script from a separate build directory.")
    print("If you really insist on a build in your home directory, you need to specify the '--in-home' option.")
    sys.exit(1)
  else:
    unused_extra_options.remove("--in-home")

if not cputype:
  cputype = detect_cpu()
cmake_flags += " -DFEAT_CPU_TYPE:STRING=" + cputype

# compiler selection
if "gcc" in buildid or "gnu" in buildid or "g++" in buildid:
  if not compiler_cxx:
    compiler_cxx="g++"
  if not is_found(compiler_cxx):
    print ("Error: Chosen cxx binary '" + compiler_cxx +"' not found!")
    sys.exit(1)
  if not compiler_cc:
    compiler_cc="gcc"
  if not is_found(compiler_cc):
    print ("Error: Chosen cc binary '" + compiler_cc +"' not found!")
    sys.exit(1)
  remove_string(unused_tokens, "gcc")
  remove_string(unused_tokens, "gnu")
  os.environ["CC"] = compiler_cc
  os.environ["CXX"] = compiler_cxx
  os.environ["LD"] = compiler_cxx
  cxxflags_temp, cmake_temp = configure_gcc (cputype, buildid, compiler_cxx, restrict_errors)
  cxxflags += cxxflags_temp
  cmake_flags += cmake_temp
  if "coverage" in buildid:
    remove_string(unused_tokens, "coverage")
    ldflags += " -fprofile-arcs -ftest-coverage"
  cmake_flags += " -DFEAT_COMPILER_ID:STRING=gcc"
elif "icc" in buildid or "intel" in buildid or "icpc" in buildid:
  if not compiler_cxx:
    compiler_cxx = "icpc"
  if not is_found(compiler_cxx):
    print ("Error: Chosen cxx binary '" + compiler_cxx +"' not found!")
    sys.exit(1)
  if not compiler_cc:
    compiler_cc = "icc"
  if not is_found(compiler_cc):
    print ("Error: Chosen cc binary '" + compiler_cc +"' not found!")
    sys.exit(1)
  remove_string(unused_tokens, "icc")
  remove_string(unused_tokens, "icpc")
  remove_string(unused_tokens, "intel")
  os.environ["CC"] = compiler_cc
  os.environ["CXX"] = compiler_cxx
  os.environ["LD"] = compiler_cxx
  cxxflags += " " + configure_icc (cputype, buildid, compiler_cxx, system_host_compiler, restrict_errors)
  cmake_flags += " -DFEAT_COMPILER_ID:STRING=icc"
elif "icx" in buildid or "icpx" in buildid or "oneapi" in buildid:
  if not compiler_cxx:
    compiler_cxx = "icpx"
  if not is_found(compiler_cxx):
    print ("Error: Chosen cxx binary '" + compiler_cxx +"' not found!")
    sys.exit(1)
  if not compiler_cc:
    compiler_cc = "icx"
  if not is_found(compiler_cc):
    print ("Error: Chosen cc binary '" + compiler_cc +"' not found!")
    sys.exit(1)
  remove_string(unused_tokens, "icx")
  remove_string(unused_tokens, "icpx")
  remove_string(unused_tokens, "oneapi")
  os.environ["CC"] = compiler_cc
  os.environ["CXX"] = compiler_cxx
  os.environ["LD"] = compiler_cxx
  cxxflags += " " + configure_icx (cputype, buildid, compiler_cxx, system_host_compiler, restrict_errors)
  cmake_flags += " -DFEAT_COMPILER_ID:STRING=icx"
elif "clang" in buildid or "llvm" in buildid:
  if not compiler_cxx:
    compiler_cxx = "clang++"
  if not is_found(compiler_cxx):
    print ("Error: Chosen cxx binary '" + compiler_cxx +"' not found!")
    sys.exit(1)
  if not compiler_cc:
    compiler_cc = "clang"
  if not is_found(compiler_cc):
    print ("Error: Chosen cc binary '" + compiler_cc +"' not found!")
    sys.exit(1)
  remove_string(unused_tokens, "clang")
  remove_string(unused_tokens, "llvm")
  os.environ["CC"] = compiler_cc
  os.environ["CXX"] = compiler_cxx
  os.environ["LD"] = compiler_cxx
  cxxflags += " " + configure_clang (cputype, buildid, compiler_cxx, system_host_compiler, restrict_errors)
  cmake_flags += " -DFEAT_COMPILER_ID:STRING=clang"
elif "cray" in buildid:
  if not compiler_cxx:
    compiler_cxx = "CC"
  if not is_found(compiler_cxx):
    print ("Error: Chosen cxx binary '" + compiler_cxx +"' not found!")
    sys.exit(1)
  if not compiler_cc:
    compiler_cc = "cc"
  if not is_found(compiler_cc):
    print ("Error: Chosen cc binary '" + compiler_cc +"' not found!")
    sys.exit(1)
  remove_string(unused_tokens, "cray")
  os.environ["CC"] = compiler_cc
  os.environ["CXX"] = compiler_cxx
  os.environ["LD"] = compiler_cxx
  cxxflags += " " + configure_cray (cputype, buildid, compiler_cxx, restrict_errors)
  cmake_flags += " -DFEAT_COMPILER_ID:STRING=cray"
else:
  print ("Error: No supported compiler found in build id:")
  print (buildid_string)
  sys.exit(1)

# additional options
if "ccache" in buildid:
  if not is_found("ccache"):
    print ("Error: Choosen compiler frontend binary ccache not found!")
    sys.exit(1)
  if "scorep" in buildid:
    print ("Error: ccache and scorep cannot be used together!")
    sys.exit(1)
  print("ccache version: " + get_output("ccache -V")[0].split()[2])
  remove_string(unused_tokens, "ccache")
  os.environ["CC"] = "ccache " + os.environ["CC"]
  os.environ["CXX"] = "ccache " + os.environ["CXX"]
  cmake_flags += " -DFEAT_USE_COMPILER_WRAPPER:BOOL=ON"

if "scorep" in buildid:
  if not is_found("scorep"):
    print ("Error: Choosen compiler frontend binary scorep not found!")
    sys.exit(1)
  if "ccache" in buildid:
    print ("Error: ccache and scorep cannot be used together!")
    sys.exit(1)
  remove_string(unused_tokens, "scorep")
  os.environ["CC"] = "scorep " + os.environ["CC"]
  os.environ["CXX"] = "scorep " + os.environ["CXX"]
  cmake_flags += " -DFEAT_USE_COMPILER_WRAPPER:BOOL=ON"

if "likwid" in buildid:
  remove_string(unused_tokens, "likwid")
  cmake_flags += " -DFEAT_USE_LIKWID:BOOL=ON -DLIKWID_PERFMON:BOOL=ON"
  if(not marker_options):
    marker_options = " -DFEAT_APPLICATION_MARKER_ACTIVATED:BOOL=ON"
  cmake_flags += marker_options


if "sanitizer" in buildid:
  remove_string(unused_tokens, "sanitizer")
  cmake_flags += " -DFEAT_SANITIZER:BOOL=ON"

if "cuda" in buildid:
  if not is_found("nvcc"):
    print ("Error: Choosen backend compiler binary nvcc not found!")
    sys.exit(1)
  remove_string(unused_tokens, "cuda")
  cmake_flags += " -DFEAT_HAVE_CUDA:BOOL=ON"
  if not cuda_arch:
    cuda_arch = "native"
    cuda_arch_int = 60
  cmake_flags += " -DFEAT_CUDA_ARCH:STRING=" + cuda_arch
  cmake_flags += " -DCMAKE_CUDA_ARCHITECTURES=" + str(cuda_arch_int)

  if cuda_verbose:
    cmake_flags += " -DFEAT_CUDA_VERBOSE:BOOL=ON"

  if "cudamemcheck" in buildid:
    remove_string(unused_tokens, "cudamemcheck")
    cmake_flags += " -DFEAT_CUDAMEMCHECK:BOOL=ON"

  if not cuda_host_compiler:
    cuda_host_compiler = find_exe("g++")
  cmake_flags += " -DFEAT_CUDA_HOST_COMPILER:FILEPATH=" + cuda_host_compiler

if "mkl" in buildid:
  remove_string(unused_tokens, "mkl")
  cmake_flags += " -DFEAT_HAVE_MKL:BOOL=ON"
  cxxflags += " -DMKL_ILP64"

if "valgrind" in buildid:
  if not is_found("valgrind"):
    print ("Error: Choosen debugger valgrind not found!")
    sys.exit(1)
  print("valgrind version: " + get_output("valgrind --version")[0])
  remove_string(unused_tokens, "valgrind")
  cmake_flags += " -DFEAT_VALGRIND:BOOL=ON"

if "quadmath" in buildid:
  remove_string(unused_tokens, "quadmath")
  cmake_flags += " -DFEAT_HAVE_QUADMATH:BOOL=ON"

if "half" in buildid:
  if "cuda" not in buildid:
    print("Error: Using half without cuda is not supported!")
    sys.exit()
  if (cuda_arch != "native") and (cuda_arch_int < 60):
    print("Warning: cuda arch " + cuda_arch + " is too low for half, which needs at least sm_60!")
  else:
    remove_string(unused_tokens, "half")
    cmake_flags += " -DFEAT_HAVE_HALFMATH:BOOL=ON"

if "cotire" in buildid:
  remove_string(unused_tokens, "cotire")
  cmake_flags += " -DFEAT_COTIRE:BOOL=ON"

# print a warning that quadmath + mpi requires overriding of MPI operations to function properly if not given
if ("quadmath" in buildid) and ("mpi" in buildid) and not ("--ovr_mpi_ops" in extra_options):
  # this is just a warning, not an error
  print("")
  print("Warning: both 'quadmath' and 'mpi' are specified in build-id, but MPI operations are not overridden;")
  print("please also specify the '--ovr_mpi_ops' option to enable use of quadmath in combination with MPI.")
  print("")

if "trilinos" in buildid:
  remove_string(unused_tokens, "trilinos")
  cmake_flags += " -DFEAT_HAVE_TRILINOS:BOOL=ON"

# prevent trilinos_path set without active trilinos support
if "trilinos" not in buildid and trilinos_path:
  print("Error: You need to activate trilinos support via 'trilinos' in buildid to facilitate trilinos_path!")
  sys.exit()

# prevent parmetis without mpi enabled (needed by parmetis)
if "mpi" not in buildid and ("parmetis" in buildid or "metis" in buildid):
  print("Error: Using ParMETIS without mpi is not allowed!")
  sys.exit()

# SuperLU needs MPI, because we only use SuperLU_DIST
if ("mpi" not in buildid) and ("superlu" in buildid):
  print("Error: SuperLU can only be used in combination with mpi!")
  sys.exit()

# SuperLU needs MPI, because we only use SuperLU_DIST
if ("mpi" not in buildid) and ("zoltan" in buildid):
  print("Error: Zoltan can only be used in combination with MPI!")
  sys.exit()

# give cmake on macOS a hint to the openmp lib
if platform.system() == "Darwin":
  ldflags += " -L/usr/local/opt/libomp/lib" #-lomp
  cxxflags += " -I/usr/local/opt/libomp/include"


# optional third party libraries
for package in available_packages(trunk_dirname+os.sep+"build_system", trunk_dirname+os.sep+"thirdparty"):
  for name in package.names:
    if name in buildid:
      package.add()
      cmake_flags += package.cmake_flags
      remove_string(unused_tokens, name)
      continue

# clean up previous configurations
clean = [ "CMakeCache.txt", trunk_dirname+os.sep+"CMakeCache.txt" ]
for i in clean:
  if os.path.exists(i):
    os.unlink(i)
clean = [ "feat_config.hpp", trunk_dirname+os.sep+"feat_config.hpp" ]
for i in clean:
  if os.path.exists(i):
    os.unlink(i)
clean = [ "rules.ninja", trunk_dirname+os.sep+"rules.ninja" ]
for i in clean:
  if os.path.exists(i):
    os.unlink(i)
clean = [ "build.ninja", trunk_dirname+os.sep+"build.ninja" ]
for i in clean:
  if os.path.exists(i):
    os.unlink(i)
clean = [ "CMakeFiles", trunk_dirname+os.sep+"CMakeFiles" ]
for i in clean:
  if os.path.exists(i):
    shutil.rmtree(i)

# export compiler/linker flags
os.environ["CXXFLAGS"] = cxxflags
if "lto" in buildid:
  remove_string(unused_tokens, "lto")
  if not "opt" in buildid and not "fast" in buildid:
    print("Error: lto not usable in debug mode!")
    sys.exit()
  ldflags += cxxflags
os.environ["LDFLAGS"] = ldflags
os.environ["CFLAGS"] = "-O3"
# set system host compiler in cflags to pass cmake's c compiler check
if "icc" in buildid or "intel" in buildid or "icpc" in buildid:
  if system_host_compiler:
    os.environ["CFLAGS"] = "-O3  -gcc-name=" + system_host_compiler


cmake_version = get_output("cmake --version")[0].split()[2]
print("cmake version: " + cmake_version)
if int(cmake_version[:1]) < 3:
  cmake_flags += " -Wno-dev"

# print out choosen configuration
print ("============== configure_feat ===========")
print ("Build-ID: " + buildid_string)
if len(unused_tokens) == 0:
  #print ("Unused Build-ID tokens: none")
  pass
else:
  print ("")
  print ("Warning: Unused Build-ID tokens: " + "-".join(unused_tokens))
if len(unused_extra_options) == 0:
  #print ("Unused extra option tokens: none")
  pass
else:
  print ("")
  print ("Warning: Unused extra option tokens: " + " ".join(unused_extra_options))
print ("")
print ("Extra Options: " + " ".join(extra_options))
print ("")
print ("CPU Type: " + cputype)
print ("")
print ("cxx: " + os.environ["CXX"])
print ("")
print ("cxxflags: " + os.environ["CXXFLAGS"])
print ("")
print ("ldflags: " + os.environ["LDFLAGS"])
print ("")
if (cuda_arch != ""):
  print ("cuda_arch: " + cuda_arch)
print ("")
print ("Generator: " + generator)
print ("")
print ("cmake  %s -G\"%s\" \"%s\"" % (cmake_flags, generator, trunk_dirname))
print ("")
# start actual configuration
print ("============== CMAKE =====================")
sys.stdout.flush()
sys.stderr.flush()
subprocess.call("cmake  %s -G\"%s\" \"%s\"" % (cmake_flags, generator, trunk_dirname), shell=True)
