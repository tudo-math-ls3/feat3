# FEAT3: Finite Element Analysis Toolbox, Version 3
# Copyright (C) 2010 - 2023 by Stefan Turek & the FEAT group
# FEAT3 is released under the GNU General Public License version 3,
# see the file 'copyright.txt' in the top level directory for details.
__author__ = "Peter Zajac"
__date__   = "February 2023"
from build_system.thirdparty_package import ThirdpartyPackage
import os
import platform

class Zoltan(ThirdpartyPackage):
  def __init__(self,trunk_dirname):
    self.version = "3.901"
    self.names = ["zoltan"]
    self.name = "Zoltan"
    self.dirname = "Zoltan-" + self.version
    self.realdirname = trunk_dirname + "\\" + self.dirname
    self.filename = "Zoltan-" + self.version + ".tar.gz"
    self.url = "https://github.com/sandialabs/Zoltan/archive/refs/tags/v" + self.version + ".tar.gz"
    self.cmake_flags = " -DFEAT_HAVE_ZOLTAN:BOOL=ON -DFEAT_DIRNAME_ZOLTAN:STRING='" + self.dirname + "'"
    self.trunk_dirname = trunk_dirname
    self.target_dirname = trunk_dirname
    self.cmake_find_package_avail = False

  def patch(self):
    if platform.system() != "Windows":
      return
    print("\nPatching " + self.name + " " + self.version + " sources...")
    # write configure file
    # cfg_file = os.path.join(self.dirname, "src", "include", "Zoltan_config.h")
    # if not os.path.isfile(cfg_file):
    #   print("Writing Config Header '%s'..." % cfg_file)
    #   fo = open(cfg_file, "wt")
    #   fo.write("/* Zoltan config header generated by FEAT3 'vc17-thirdparty.py' script */\n")
    #   fo.write("#define HAVE_MPI 1\n")
    #   fo.write("#define UNSIGNED_LONG_LONG_GLOBAL_IDS 1\n")
    #   fo.write("#define strcasecmp _stricmp\n")
    #   fo.write("#define strncasecmp _strnicmp\n")
    #   fo.close()

    # patch "phg/phg_util.c"
    self.patch_file(os.path.join("src", "phg", "phg_util.c"), [
      [75, "{", "{/*"],
      [85, "}", "*/}"]
    ])
    # patch "rcb/inertial2d.c"
    self.patch_file(os.path.join("src", "rcb", "inertial2d.c"), [
      [66, "#define max(a, b) ((a) < (b) ? (b) : (a))", "/*#define max(a, b) ((a) < (b) ? (b) : (a))*/"],
      [67, "#define min(a, b) ((a) > (b) ? (b) : (a))", "/*#define min(a, b) ((a) > (b) ? (b) : (a))*/"]
    ])
    # patch "rcb/inertial3d.c"
    self.patch_file(os.path.join("src", "rcb", "inertial3d.c"), [
      [54, "#define max(a, b) ((a) < (b) ? (b) : (a))", "/*#define max(a, b) ((a) < (b) ? (b) : (a))*/"],
      [55, "#define min(a, b) ((a) > (b) ? (b) : (a))", "/*#define min(a, b) ((a) > (b) ? (b) : (a))*/"]
    ])
    # patch "zz/zz_const.c"
    self.patch_file(os.path.join("src", "zz", "zz_const.h"), [
      [55, "#include <strings.h>", "/*#include <strings.h>*/"]
    ])
    # patch "zz/zz_util.c"
    self.patch_file(os.path.join("src", "zz", "zz_util.c"), [
      [55, "#include <unistd.h>", "/*#include <unistd.h>*/"]
    ])
