// FEAT3: Finite Element Analysis Toolbox, Version 3
// Copyright (C) 2010 - 2023 by Stefan Turek & the FEAT group
// FEAT3 is released under the GNU General Public License version 3,
// see the file 'copyright.txt' in the top level directory for details.

// Template file for configuration done by CMAKE
#pragma once
#ifndef FEAT_CONFIG_HPP
/// Header guard
#define FEAT_CONFIG_HPP 1

/// Version of CMAKE used to configure this project
#define CMAKE_VERSION "${CMAKE_VERSION}"

/// Should the build include DEBUG support?
#cmakedefine FEAT_DEBUG_MODE

/// Is an mpi environment available?
#cmakedefine FEAT_HAVE_MPI

/// Path to the FEAT source dir
#define FEAT_SOURCE_DIR "${FEAT_SOURCE_DIR}"

/// Path to the FEAT binary dir
#define FEAT_BINARY_DIR "${FEAT_BINARY_DIR}"

/// provided BUILD-ID being used
#define BUILD_ID "${BUILD_ID}"

/// CPU microarchitecture being used
#define FEAT_CPU_TYPE "${FEAT_CPU_TYPE}"

/// Do we have OpenMP support enabled?
#cmakedefine FEAT_HAVE_OMP

/// Do we have CUDA support enabled?
#cmakedefine FEAT_HAVE_CUDA

/// Do we have MKL support enabled?
#cmakedefine FEAT_HAVE_MKL

/// Do we have QUADMATH support enabled?
#cmakedefine FEAT_HAVE_QUADMATH

/// Do we have HALFMATH support enabled?
#cmakedefine FEAT_HAVE_HALFMATH

/// Do we have ALGLIB support enabled?
#cmakedefine FEAT_HAVE_ALGLIB

/// Do we have fparser support enabled?
#cmakedefine FEAT_HAVE_FPARSER

/// Do we have FloatX support enabled?
#cmakedefine FEAT_HAVE_FLOATX

/// Do we have UMFPACK support enabled?
#cmakedefine FEAT_HAVE_UMFPACK

/// Do we have PARMETIS support enabled?
#cmakedefine FEAT_HAVE_PARMETIS

/// Do we have ZLIB support enabled?
#cmakedefine FEAT_HAVE_ZLIB

/// Do we have ZFP support enabled?
#cmakedefine FEAT_HAVE_ZFP

/// Do we have HYPRE support enabled?
#cmakedefine FEAT_HAVE_HYPRE

/// Do we have CGAL support enabled?
#cmakedefine FEAT_HAVE_CGAL

/// Do we have DEATH_HANDLER support enabled?
#cmakedefine FEAT_HAVE_DEATH_HANDLER

/// Do we have SuperLU support enabled?
#cmakedefine FEAT_HAVE_SUPERLU_DIST

/// Do we have Trilinos support enabled?
#cmakedefine FEAT_HAVE_TRILINOS

/// Do we use a compiler wrapper, e.g. ccache or distcc
#cmakedefine FEAT_USE_COMPILER_WRAPPER

/// Do we use the mkl sparse executor interface
#cmakedefine FEAT_USE_MKL_SPARSE_EXECUTOR

/// Descriptive compiler name, as detected by cmake
#define CMAKE_CXX_COMPILER_ID "${CMAKE_CXX_COMPILER_ID}"

/// Descriptive compiler name, as set by the configure_feat script
#define FEAT_COMPILER_ID "${FEAT_COMPILER_ID}"

/// Compiler version, as detected by cmake
#define CMAKE_CXX_COMPILER_VERSION "${CMAKE_CXX_COMPILER_VERSION}"

/// Path to the used host compiler
#define CMAKE_CXX_COMPILER "${CMAKE_CXX_COMPILER}"

/// Contains the 'real' compiler, if we use a COMPILER_WRAPPER and is empty, if we don't
#define CMAKE_CXX_COMPILER_ARG1 "${CMAKE_CXX_COMPILER_ARG1}"

/// Path to CMAKE_CXX_COMPILER_ARG1, if any.
#define CMAKE_CXX_COMPILER_ARG1_PATH "${CMAKE_CXX_COMPILER_ARG1_PATH}"

/// Host CXX Compiler Flags
#define CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}"

/// The system compiler the actual host compiler will rely on, e.g. using its header files etc.
#define FEAT_SYSTEM_HOST_COMPILER "${FEAT_SYSTEM_HOST_COMPILER}"

/// The host compiler that will be used by nvcc for host code compilation.
#define FEAT_CUDA_HOST_COMPILER "${FEAT_CUDA_HOST_COMPILER}"

#ifdef FEAT_HAVE_CUDA
/// Path to CUDA Compiler
#define FEAT_CUDA_NVCC_EXECUTABLE "${CUDA_NVCC_EXECUTABLE}"
/// CUDA CXX Compiler Flags
#define FEAT_CUDA_NVCC_FLAGS "${CUDA_NVCC_FLAGS}"
/// CUDA SDK Version
#define FEAT_CUDA_VERSION "${CUDA_VERSION}"
/// CUDA major version
#define FEAT_CUDA_VERSION_MAJOR "${CUDA_VERSION_MAJOR}"
/// compile for this CUDA device architecture
#define FEAT_CUDA_ARCH "${FEAT_CUDA_ARCH}"
#endif

#ifdef FEAT_HAVE_MPI
/// absolute path to mpi compiler wrapper
#define MPI_CXX_COMPILER "${MPI_CXX_COMPILER}"
/// absolute path to mpi execution wrapper
#define MPIEXEC "${MPIEXEC}"
/// mpi version
#define CMAKE_MPI_VERSION "${CMAKE_MPI_VERSION}"
#endif

/// Hostname of the computer in use
#define FEAT_HOSTNAME "${FEAT_HOSTNAME}"

/// full path of the cmake binary
#define CMAKE_COMMAND "${CMAKE_COMMAND}"

/// cmake 'makefile' generator
#define CMAKE_GENERATOR "${CMAKE_GENERATOR}"

/// SHA1 of HEAD in FEAT_SOURCE_DIR
#define FEAT_GIT_SHA1 "${FEAT_GIT_SHA1}"

/// Should we unroll all banded matrix kernels via template meta programming?
#cmakedefine FEAT_UNROLL_BANDED

/// Should we explicitly instantiate all common kernel templates?
#cmakedefine FEAT_EICKT

/// Should we use our custom MPI operations?
#cmakedefine FEAT_OVERRIDE_MPI_OPS

/// Should we use separate threads for asynchronous mpi communication?
#cmakedefine FEAT_MPI_THREAD_MULTIPLE

/// Shall we use sanitizer features of our compilers?
#cmakedefine FEAT_SANITIZER

/// Activate perfmon?
#cmakedefine LIKWID_PERFMON

/// Use marker likwid API?
#cmakedefine FEAT_USE_LIKWID

/// Activate application markers
#cmakedefine FEAT_APPLICATION_MARKER_ACTIVATED

/// Activate kernel markers
#cmakedefine FEAT_KERNEL_MARKER_ACTIVATED

/// Activate special markers
#cmakedefine FEAT_SPECIAL_MARKER_ACTIVATED

#endif // FEAT_CONFIG_HPP
